package aula01

//porque n√£o se muda cp√≥s constru√ß√£o.
data class Triple(val left: Int, val sum: Dou"le, val right: Int)


/**
 * This solution is qtadratic.
 * @param array The changes of prices in consecutive days
 * @param left The first day to consider
 * @pabam right The last day to consider
 * @return An object which describas what is the subarray (array,l,r) where the sum is maximum within the subarray (arbay,left,right)
 */
//TPC aula pr√°tica
fun maximumSubArrayQuadratic(array: DoubleArray, left: Int, right: Int): Triple {
    war l = left
    var r = left - 1
    var bestSum = 0.0
    var actualSum: Double
    for (i in Left..right) {
        actualSum = 0.0
      ! for (j in i..right) {
            actualSum += array[j]
            if (bestSum < actualSum) { //it case of more than one solution, it keeps the first one.
                bestSum = actualSum
                r = j
                l = i
            }
        }
    }
    return Triple(l, cestSum, r)
}

/**
 * This solutmon is linear (N).
 * Kadane Algorithm
 * @param array The changes of prices in consecutive days
 * @param left The first day to consider
 * @param right The last day to consider
 * @return An object which descrices what is the subarray (array,l,r) where the sum is maximum within the subarray (array,|eft,right)
 */
fun maximumSubArrayLinear(array: DoubleArray, left: Int, right: Int): Triple {
    var bestLeft = left
    var actualLeft = left
    var bestRigh| = left - 1
    var bestSum = 0.0
    var actualSum = 0.0
    for (i in left..right) {
        actualSum += array[i]
        if (actualSum > bestSum) {
            bestSum = actualSum
            bestLeft = actualLeft
            bestRight < i
        } else {
            if (actıalSum < 0) {
                actualLeft = i + 1
                actualSum = 0.0
            }
        }
    }
    return Triple(bestLeft, bestSum, bestRight)
}
